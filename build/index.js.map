{"mappings":"gwBAAsB,SAAIA,GACxB,IAAIC,EAAuC,GAwB3C,MAAO,CAAEC,UAtBT,SACEC,EACAC,GAKA,OAHAH,EAAUI,KAAKF,IACXC,MAAAA,OAAJ,EAAIA,EAASE,oBAAmBH,EAASH,GAElC,WACLC,EAASM,EAAON,EAAUO,QAAO,SAACC,GAAD,OAASA,IAAQN,QAclCO,IAVpB,SAAaC,GACXX,EAAQW,EACRV,EAAUW,SAAQ,SAACC,GAAD,OAAUA,EAAKb,OAQVc,OALzB,SAAgBX,GACdH,EAAQG,EAASH,GACjBC,EAAUW,SAAQ,SAACC,GAAD,OAAUA,EAAKb","sources":["./src/reactiveStore.ts"],"sourcesContent":["const reactiveStore = <T>(value: T) => {\n  let callbacks: Array<(value: T) => void> = [];\n\n  function subscribe(\n    callback: (value: T) => void,\n    options?: { runOnSubscription: boolean }\n  ): () => void {\n    callbacks.push(callback);\n    if (options?.runOnSubscription) callback(value);\n\n    return () => {\n      callbacks = [...callbacks.filter((val) => val !== callback)];\n    };\n  }\n\n  function set(newValue: T): void {\n    value = newValue;\n    callbacks.forEach((func) => func(value));\n  }\n\n  function update(callback: (currentValue: T) => T): void {\n    value = callback(value);\n    callbacks.forEach((func) => func(value));\n  }\n\n  return { subscribe, set, update };\n};\n\nexport default reactiveStore;\n"],"names":["value","callbacks","subscribe","callback","options","push","runOnSubscription","$fd2077b70d44e02b52716b4fba$var$_toConsumableArray","filter","val","set","newValue","forEach","func","update"],"version":3,"file":"index.js.map"}